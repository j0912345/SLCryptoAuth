<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MelonLoader</name>
    </assembly>
    <members>
        <member name="P:MelonLoader.MelonAdditionalCreditsAttribute.Credits">
            <summary>
            Any additional credits that the mod author might want to include
            </summary>
        </member>
        <member name="M:MelonLoader.MelonAdditionalCreditsAttribute.#ctor(System.String)">
            <summary>
            AdditionalCredits constructor
            </summary>
            <param name="credits">The additional credits of the mod</param>
        </member>
        <member name="P:MelonLoader.MelonAdditionalDependenciesAttribute.AssemblyNames">
            <summary>
            The (simple) assembly names of Additional Dependencies that aren't directly referenced but should still be regarded as important.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonApplicationAttribute.Developer">
            <summary>
            Developer of the Game.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonApplicationAttribute.Name">
            <summary>
            Name of the Game.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonApplicationAttribute.Universal">
            <summary>
            If the Attribute is set as Universal or not.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonApplicationAttribute.IsCompatible(System.String,System.String)">
            <summary>
            Returns true or false if the Game is compatible with this Assembly.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonApplicationAttribute.IsCompatible(MelonLoader.MelonApplicationAttribute)">
            <summary>
            Returns true or false if the Game is compatible with this Assembly.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonApplicationAttribute.IsCompatibleBecauseUniversal(MelonLoader.MelonApplicationAttribute)">
            <summary>
            Returns true or false if the Game is compatible with this Assembly specifically because of Universal Compatibility.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonApplicationVersionAttribute.Version">
            <summary>
            Version of the Game.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonApplicationVersionAttribute.Universal">
            <summary>
            If the Attribute is set as Universal or not.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonAuthorColorAttribute.DrawingColor">
            <summary>
            Color of the Author Log.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonColorAttribute.DrawingColor">
            <summary>
            Color of the Author Log.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonIDAttribute.ID">
            <summary>ID of the Melon.</summary>
        </member>
        <member name="P:MelonLoader.MelonIncompatibleAssembliesAttribute.AssemblyNames">
            <summary>
            The (simple) assembly names of the mods that are incompatible.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonInfoAttribute.SystemType">
            <summary>
            System.Type of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonInfoAttribute.Name">
            <summary>
            Name of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonInfoAttribute.Version">
            <summary>
            Version of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonInfoAttribute.SemanticVersion">
            <summary>
            Semantic Version of the Melon. Will be null if Version is not using the <see href="https://semver.org">Semantic Versioning</see> format.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonInfoAttribute.Author">
            <summary>
            Author of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonInfoAttribute.DownloadLink">
            <summary>
            Download Link of the Melon.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonInfoAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            MelonInfo constructor.
            </summary>
            <param name="type">The main Melon type of the Melon (for example TestMod)</param>
            <param name="name">Name of the Melon</param>
            <param name="version">Version of the Melon</param>
            <param name="author">Author of the Melon</param>
            <param name="downloadLink">URL to the download link of the mod [optional]</param>
        </member>
        <member name="M:MelonLoader.MelonInfoAttribute.#ctor(System.Type,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            MelonInfo constructor.
            </summary>
            <param name="type">The main Melon type of the Melon (for example TestMod)</param>
            <param name="name">Name of the Melon</param>
            <param name="versionMajor">Version Major of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="versionMinor">Version Minor of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="versionRevision">Version Revision of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="versionIdentifier">Version Identifier of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="author">Author of the Melon</param>
            <param name="downloadLink">URL to the download link of the mod [optional]</param>
        </member>
        <member name="M:MelonLoader.MelonInfoAttribute.#ctor(System.Type,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            MelonInfo constructor.
            </summary>
            <param name="type">The main Melon type of the Melon (for example TestMod)</param>
            <param name="name">Name of the Melon</param>
            <param name="versionMajor">Version Major of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="versionMinor">Version Minor of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="versionRevision">Version Revision of the Melon (Using the <see href="https://semver.org">Semantic Versioning</see> format)</param>
            <param name="author">Author of the Melon</param>
            <param name="downloadLink">URL to the download link of the mod [optional]</param>
        </member>
        <member name="P:MelonLoader.MelonOptionalDependenciesAttribute.AssemblyNames">
            <summary>
            The (simple) assembly names of the dependencies that should be regarded as optional.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonPriorityAttribute.Priority">
            <summary>
            Priority of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonProcessAttribute.EXE_Name">
            <summary>
            Name of the Game's Executable without the '.exe' extension.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonProcessAttribute.Universal">
            <summary>
            If the Attribute is set as Universal or not.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonProcessAttribute.IsCompatible(System.String)">
            <summary>
            Checks if the Attribute is compatible with <paramref name="processName"/> or not.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderBuildAttribute.HashCode">
            <summary>
            Build HashCode of MelonLoader.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderVersionAttribute.SemVer">
            <summary>
            Specified SemVersion.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderVersionAttribute.Major">
            <summary>
            Specified Version Major.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderVersionAttribute.Minor">
            <summary>
            Specified Version Minor.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderVersionAttribute.Patch">
            <summary>
            Specified Version Patch.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderVersionAttribute.Prerelease">
            <summary>
            Specified Version Prerelease.
            </summary>
        </member>
        <member name="P:MelonLoader.VerifyLoaderVersionAttribute.IsMinimum">
            <summary>
            If Version Specified is a Minimum.
            </summary>
        </member>
        <member name="P:MelonLoader.LemonArraySegment`1.Array">
            <summary>Gets the original array containing the range of elements that the array segment delimits.</summary>
            <returns>The original array that was passed to the constructor, and that contains the range delimited by the <see cref="T:MelonLoader.LemonArraySegment`1" />.</returns>
        </member>
        <member name="P:MelonLoader.LemonArraySegment`1.Offset">
            <summary>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</summary>
            <returns>The position of the first element in the range delimited by the <see cref="T:MelonLoader.LemonArraySegment`1" />, relative to the start of the original array.</returns>
        </member>
        <member name="P:MelonLoader.LemonArraySegment`1.Count">
            <summary>Gets the number of elements in the range delimited by the array segment.</summary>
            <returns>The number of elements in the range delimited by the <see cref="T:MelonLoader.LemonArraySegment`1" />.</returns>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.#ctor(`0[])">
            <summary>Initializes a new instance of the <see cref="T:MelonLoader.LemonArraySegment`1" /> structure that delimits all the elements in the specified array.</summary>
            <param name="array">The array to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:MelonLoader.LemonArraySegment`1" /> structure that delimits the specified range of the elements in the specified array.</summary>
            <param name="array">The array containing the range of elements to delimit.</param>
            <param name="offset">The zero-based index of the first element in the range.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="offset" /> and <paramref name="count" /> do not specify a valid range in <paramref name="array" />.</exception>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.GetHashCode">
            <summary>Returns the hash code for the current instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current instance.</summary>
            <param name="obj">The object to be compared with the current instance.</param>
            <returns>
              <see langword="true" /> if the specified object is a <see cref="T:MelonLoader.LemonArraySegment`1" /> structure and is equal to the current instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.Equals(MelonLoader.LemonArraySegment{`0})">
            <summary>Determines whether the specified <see cref="T:MelonLoader.LemonArraySegment`1" /> structure is equal to the current instance.</summary>
            <param name="obj">The structure to compare with the current instance.</param>
            <returns>
              <see langword="true" /> if the specified <see cref="T:MelonLoader.LemonArraySegment`1" /> structure is equal to the current instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.op_Equality(MelonLoader.LemonArraySegment{`0},MelonLoader.LemonArraySegment{`0})">
            <summary>Indicates whether two <see cref="T:MelonLoader.LemonArraySegment`1" /> structures are equal.</summary>
            <param name="a">The  structure on the left side of the equality operator.</param>
            <param name="b">The structure on the right side of the equality operator.</param>
            <returns>
              <see langword="true" /> if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.op_Inequality(MelonLoader.LemonArraySegment{`0},MelonLoader.LemonArraySegment{`0})">
            <summary>Indicates whether two <see cref="T:MelonLoader.LemonArraySegment`1" /> structures are unequal.</summary>
            <param name="a">The structure on the left side of the inequality operator.</param>
            <param name="b">The structure on the right side of the inequality operator.</param>
            <returns>
              <see langword="true" /> if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:MelonLoader.LemonArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through an array segment.</summary>
            <returns>An enumerator that can be used to iterate through the array segment.</returns>
        </member>
        <member name="M:MelonLoader.LemonEnumerator`1.#ctor(`0[])">
            <summary>
            Creates a new instance of <see cref="T:MelonLoader.LemonEnumerator`1"/> with a new copy of '<paramref name="lemons"/>'.
            </summary>
        </member>
        <member name="M:MelonLoader.LemonEnumerator`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of <see cref="T:MelonLoader.LemonEnumerator`1"/> with a new copy of '<paramref name="lemons"/>'.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonAssembly.OnAssemblyResolving">
            <summary>
            Called before a process of resolving Melons from a MelonAssembly has started.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonAssembly.LoadedAssemblies">
            <summary>
            List of all loaded MelonAssemblies.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonAssembly.FindMelonInstance``1">
            <summary>
            Tries to find the instance of Melon with type T, whether it's registered or not
            </summary>
        </member>
        <member name="M:MelonLoader.MelonAssembly.GetMelonAssemblyOfMember(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the MelonAssembly of the given member. If the given member is not in any MelonAssembly, returns null.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonAssembly.LoadMelonAssembly(System.String,System.Boolean)">
            <summary>
            Loads or finds a MelonAssembly from path.
            </summary>
            <param name="path">Path of the MelonAssembly</param>
            <param name="loadMelons">Sets whether Melons should be auto-loaded or not</param>
        </member>
        <member name="M:MelonLoader.MelonAssembly.LoadRawMelonAssembly(System.String,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Loads or finds a MelonAssembly from raw Assembly Data.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonAssembly.LoadMelonAssembly(System.String,System.Reflection.Assembly,System.Boolean)">
            <summary>
            Loads or finds a MelonAssembly.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonAssembly.Hash">
            <summary>
            A SHA256 Hash of the Assembly.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonAssembly.LoadedMelons">
            <summary>
            A list of all loaded Melons in the Assembly.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonAssembly.RottenMelons">
            <summary>
            A list of all broken Melons in the Assembly.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonAssembly.UnregisterMelons(System.String,System.Boolean)">
            <summary>
            Unregisters all Melons in this Assembly.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonBase.OnMelonRegistered">
            <summary>
            Called once a Melon is fully registered.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonBase.OnMelonUnregistered">
            <summary>
            Called when a Melon unregisters.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonBase.OnMelonInitializing">
            <summary>
            Called before a Melon starts initializing.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.CreateWrapper``1(System.String,System.String,System.String,MelonLoader.MelonApplicationAttribute[],MelonLoader.MelonProcessAttribute[],System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.String)">
            <summary>
            Creates a new Melon instance for a Wrapper.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.RegisterSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Registers a List of Melons in the right order.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.MelonAssembly">
            <summary>
            MelonAssembly of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.Priority">
            <summary>
            Priority of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.ConsoleColor">
            <summary>
            Console Color of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.AuthorConsoleColor">
            <summary>
            Console Color of the Author that made this melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.Info">
            <summary>
            Info Attribute of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.AdditionalCredits">
            <summary>
            AdditionalCredits Attribute of the Melon
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.SupportedProcesses">
            <summary>
            Process Attributes of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.Games">
            <summary>
            Game Attributes of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.SupportedGameVersions">
            <summary>
            Game Version Attributes of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.OptionalDependencies">
            <summary>
            Optional Dependencies Attribute of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.SupportedPlatforms">
            <summary>
            Platform Attribute of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.SupportedDomain">
            <summary>
            Platform Attribute of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.SupportedMLVersion">
            <summary>
            Verify Loader Version Attribute of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.SupportedMLBuild">
            <summary>
            Verify Build Version Attribute of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.HarmonyInstance">
            <summary>
            Auto-Created Harmony Instance of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.LoggerInstance">
            <summary>
            Auto-Created MelonLogger Instance of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.ID">
            <summary>
            Optional ID of the Melon.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.Registered">
            <summary>
            <see langword="true"/> if the Melon is registered.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonBase.MelonTypeName">
            <summary>
            Name of the current Melon Type.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnPreSupportModule">
            <summary>
            Runs before Engine Module Initialization.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnApplicationQuit">
            <summary>
            Runs on a quit request. It is possible to abort the request in this callback.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnPreferencesSaved">
            <summary>
            Runs when Melon Preferences get saved.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnPreferencesSaved(System.String)">
            <summary>
            Runs when Melon Preferences get saved. Gets passed the Preferences's File Path.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnPreferencesLoaded">
            <summary>
            Runs when Melon Preferences get loaded.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnPreferencesLoaded(System.String)">
            <summary>
            Runs when Melon Preferences get loaded. Gets passed the Preferences's File Path.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnEarlyInitializeMelon">
            <summary>
            Runs when the Melon is registered. Executed before the Melon's info is printed to the console. This callback should only be used a constructor for the Melon.
            </summary>
            <remarks>
            Please note that this callback may run before the Support Module is loaded.
            <br>As a result, using unhollowed assemblies may not be possible yet and you would have to override <see cref="M:MelonLoader.MelonBase.OnInitializeMelon"/> instead.</br>
            </remarks>
        </member>
        <member name="M:MelonLoader.MelonBase.OnInitializeMelon">
            <summary>
            Runs after the Melon has registered. This callback waits until MelonLoader has fully initialized (<see cref="F:MelonLoader.MelonEvents.OnApplicationStart"/>).
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnLateInitializeMelon">
            <summary>
            Runs after <see cref="M:MelonLoader.MelonBase.OnInitializeMelon"/>. This callback waits until Unity has invoked the first 'Start' messages (<see cref="F:MelonLoader.MelonEvents.OnApplicationLateStart"/>).
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.OnDeinitializeMelon">
            <summary>
            Runs when the Melon is unregistered. Also runs before the Application is closed (<see cref="F:MelonLoader.MelonEvents.OnApplicationDefiniteQuit"/>).
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.Register">
            <summary>
            Registers the Melon.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.FindMelon(System.String,System.String)">
            <summary>
            Tries to find a registered Melon that matches the given Info.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonBase.Unregister(System.String,System.Boolean)">
            <summary>
            Unregisters the Melon and all other Melons located in the same Assembly.
            <para>This only unsubscribes the Melons from all Callbacks/<see cref="T:MelonLoader.MelonEvent"/>s and unpatches all Methods that were patched by Harmony, but doesn't actually unload the whole Assembly.</para>
            </summary>
        </member>
        <member name="M:MelonLoader.MelonPlugin.OnPreInitialization">
            <summary>
            Runs before Game Initialization.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonPlugin.OnApplicationEarlyStart">
            <summary>
            Runs after Game Initialization, before OnApplicationStart
            </summary>
        </member>
        <member name="M:MelonLoader.MelonPlugin.OnPreModsLoaded">
            <summary>
            Runs before MelonMods from the Mods folder are loaded.
            </summary>
        </member>
        <member name="M:MelonLoader.MelonPlugin.OnApplicationStarted">
            <summary>
            Runs after all MelonLoader components are fully initialized (including all MelonMods).
            </summary>
        </member>
        <member name="P:MelonLoader.MelonTypeBase`1.RegisteredMelons">
            <summary>
            List of registered <typeparamref name="T"/>s.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonTypeBase`1.TypeName">
            <summary>
            A Human-Readable Name for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:MelonLoader.RottenMelon">
            <summary>
            An info class for broken Melons.
            </summary>
        </member>
        <member name="T:MelonLoader.Modules.MelonModule">
            <summary>
            A base for external MelonLoader modules.
            </summary>
        </member>
        <member name="P:MelonLoader.MelonNativeLibraryImportAttribute.Name">
            <summary>
            Name of the Export.
            </summary>
        </member>
        <member name="T:MelonLoader.Pastel.ConsoleExtensions">
            <summary>
            Controls colored console output by <see langword="Pastel"/>.
            </summary>
        </member>
        <member name="M:MelonLoader.Pastel.ConsoleExtensions.Enable">
            <summary>
            Enables any future console color output produced by Pastel.
            </summary>
        </member>
        <member name="M:MelonLoader.Pastel.ConsoleExtensions.Disable">
            <summary>
            Disables any future console color output produced by Pastel.
            </summary>
        </member>
        <member name="M:MelonLoader.Pastel.ConsoleExtensions.Pastel(System.String,System.Drawing.Color)">
            <summary>
            Returns a string wrapped in an ANSI foreground color code using the specified color.
            </summary>
            <param name="input">The string to color.</param>
            <param name="color">The color to use on the specified string.</param>
        </member>
        <member name="M:MelonLoader.Pastel.ConsoleExtensions.Pastel(System.String,System.String)">
            <summary>
            Returns a string wrapped in an ANSI foreground color code using the specified color.
            </summary>
            <param name="input">The string to color.</param>
            <param name="hexColor">The color to use on the specified string.<para>Supported format: [#]RRGGBB.</para></param>
        </member>
        <member name="M:MelonLoader.Pastel.ConsoleExtensions.PastelBg(System.String,System.Drawing.Color)">
            <summary>
            Returns a string wrapped in an ANSI background color code using the specified color.
            </summary>
            <param name="input">The string to color.</param>
            <param name="color">The color to use on the specified string.</param>
        </member>
        <member name="M:MelonLoader.Pastel.ConsoleExtensions.PastelBg(System.String,System.String)">
            <summary>
            Returns a string wrapped in an ANSI background color code using the specified color.
            </summary>
            <param name="input">The string to color.</param>
            <param name="hexColor">The color to use on the specified string.<para>Supported format: [#]RRGGBB.</para></param>
        </member>
        <member name="F:MelonLoader.MelonPreferences.OnPreferencesLoaded">
            <summary>
            Occurs when a Preferences File has been loaded.
            <para>
            <see cref="T:System.String"/>: Path of the Preferences File.
            </para>
            </summary>
        </member>
        <member name="F:MelonLoader.MelonPreferences.OnPreferencesSaved">
            <summary>
            Occurs when a Preferences File has been saved.
            <para>
            <see cref="T:System.String"/>: Path of the Preferences File.
            </para>
            </summary>
        </member>
        <member name="P:MelonLoader.Utils.MelonLaunchOptions.ExternalArguments">
            <summary>
            Dictionary of all Arguments with value (if found) that were not used by MelonLoader
            <para>
            <b>Key</b> is the argument, <b>Value</b> is the value for the argument, <c>null</c> if not found
            </para>
            </summary>
        </member>
        <member name="P:MelonLoader.Utils.MelonLaunchOptions.CommandLineArgs">
            <summary>
            Array of All Command Line Arguments
            </summary>
        </member>
        <member name="T:MelonLoader.EnumExtensions">
            <summary>
            Extentions for enums.
            </summary>
        </member>
        <member name="M:MelonLoader.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            From: http://www.sambeauvois.be/blog/2011/08/enum-hasflag-method-extension-for-4-0-framework/
            A FX 3.5 way to mimic the FX4 "HasFlag" method.
            </summary>
            <param name="variable">The tested enum.</param>
            <param name="value">The value to test.</param>
            <returns>True if the flag is set. Otherwise false.</returns>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnPreInitialization">
            <summary>
            Called after all MelonPlugins are initialized.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnApplicationEarlyStart">
            <summary>
            Called after Game Initialization, before OnApplicationStart.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnPreSupportModule">
            <summary>
            Called after all MelonMods are initialized and right before the Engine Support Module is Initialized.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnApplicationStart">
            <summary>
            Called after all MelonLoader components are fully initialized (including all MelonMods).
            <para>Don't use this event to initialize your Melons anymore! Instead, override <see cref="M:MelonLoader.MelonBase.OnInitializeMelon"/>.</para>
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnApplicationLateStart">
            <summary>
            Called when the first 'Start' Unity Messages are invoked.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnApplicationDefiniteQuit">
            <summary>
            Called before the Application is closed. It is not possible to prevent the game from closing at this point.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnApplicationQuit">
            <summary>
            Called on a quit request. It is possible to abort the request in this callback.
            </summary>
        </member>
        <member name="F:MelonLoader.MelonEvents.OnPreModsLoaded">
            <summary>
            Called before MelonMods are loaded from the Mods folder.
            </summary>
        </member>
        <member name="M:Semver.IntExtensions.Digits(System.Int32)">
            <summary>
            The number of digits in a non-negative number. Returns 1 for all
            negative numbers. That is ok because we are using it to calculate
            string length for a <see cref="T:System.Text.StringBuilder"/> for numbers that
            aren't supposed to be negative, but when they are it is just a little
            slower.
            </summary>
            <remarks>
            This approach is based on https://stackoverflow.com/a/51099524/268898
            where the poster offers performance benchmarks showing this is the
            fastest way to get a number of digits.
            </remarks>
        </member>
        <member name="T:Semver.SemVersion">
            <summary>
            A semantic version implementation.
            Conforms with v2.0.0 of http://semver.org
            </summary>
        </member>
        <member name="M:Semver.SemVersion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialize a <see cref="T:Semver.SemVersion"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
        </member>
        <member name="M:Semver.SemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Constructs a new instance of the <see cref="T:Semver.SemVersion" /> class.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="patch">The patch version.</param>
            <param name="prerelease">The prerelease version (e.g. "alpha").</param>
            <param name="build">The build metadata (e.g. "nightly.232").</param>
        </member>
        <member name="M:Semver.SemVersion.#ctor(System.Version)">
            <summary>
            Constructs a new instance of the <see cref="T:Semver.SemVersion"/> class from
            a <see cref="T:System.Version"/>.
            </summary>
            <param name="version">The <see cref="T:System.Version"/> that is used to initialize
            the Major, Minor, Patch and Build.</param>
            <returns>A <see cref="T:Semver.SemVersion"/> with the same Major and Minor version.
            The Patch version will be the fourth part of the version number. The
            build meta data will contain the third part of the version number if
            it is greater than zero.</returns>
        </member>
        <member name="M:Semver.SemVersion.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of a semantic version to its <see cref="T:Semver.SemVersion"/> equivalent.
            </summary>
            <param name="version">The version string.</param>
            <param name="strict">If set to <see langword="true"/> minor and patch version are required,
            otherwise they are optional.</param>
            <returns>The <see cref="T:Semver.SemVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="version"/> has an invalid format.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="version"/> is missing Minor or Patch versions and <paramref name="strict"/> is <see langword="true"/>.</exception>
            <exception cref="T:System.OverflowException">The Major, Minor, or Patch versions are larger than <code>int.MaxValue</code>.</exception>
        </member>
        <member name="M:Semver.SemVersion.TryParse(System.String,Semver.SemVersion@,System.Boolean)">
            <summary>
            Converts the string representation of a semantic version to its <see cref="T:Semver.SemVersion"/>
            equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="version">The version string.</param>
            <param name="semver">When the method returns, contains a <see cref="T:Semver.SemVersion"/> instance equivalent
            to the version string passed in, if the version string was valid, or <see langword="null"/> if the
            version string was not valid.</param>
            <param name="strict">If set to <see langword="true"/> minor and patch version are required,
            otherwise they are optional.</param>
            <returns><see langword="false"/> when a invalid version string is passed, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.Equals(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Checks whether two semantic versions are equal.
            </summary>
            <param name="versionA">The first version to compare.</param>
            <param name="versionB">The second version to compare.</param>
            <returns><see langword="true"/> if the two values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.Compare(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares the specified versions.
            </summary>
            <param name="versionA">The first version to compare.</param>
            <param name="versionB">The second version to compare.</param>
            <returns>A signed number indicating the relative values of <paramref name="versionA"/> and <paramref name="versionB"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.Change(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Make a copy of the current instance with changed properties.
            </summary>
            <param name="major">The value to replace the major version or <see langword="null"/> to leave it unchanged.</param>
            <param name="minor">The value to replace the minor version or <see langword="null"/> to leave it unchanged.</param>
            <param name="patch">The value to replace the patch version or <see langword="null"/> to leave it unchanged.</param>
            <param name="prerelease">The value to replace the prerelease version or <see langword="null"/> to leave it unchanged.</param>
            <param name="build">The value to replace the build metadata or <see langword="null"/> to leave it unchanged.</param>
            <returns>The new version object.</returns>
            <remarks>
            The change method is intended to be called using named argument syntax, passing only
            those fields to be changed.
            </remarks>
            <example>
            To change only the patch version:
            <code>version.Change(patch: 4)</code>
            </example>
        </member>
        <member name="P:Semver.SemVersion.Major">
            <summary>
            Gets the major version.
            </summary>
            <value>
            The major version.
            </value>
        </member>
        <member name="P:Semver.SemVersion.Minor">
            <summary>
            Gets the minor version.
            </summary>
            <value>
            The minor version.
            </value>
        </member>
        <member name="P:Semver.SemVersion.Patch">
            <summary>
            Gets the patch version.
            </summary>
            <value>
            The patch version.
            </value>
        </member>
        <member name="P:Semver.SemVersion.Prerelease">
            <summary>
            Gets the prerelease version.
            </summary>
            <value>
            The prerelease version. Empty string if this is a release version.
            </value>
        </member>
        <member name="P:Semver.SemVersion.Build">
            <summary>
            Gets the build metadata.
            </summary>
            <value>
            The build metadata. Empty string if there is no build metadata.
            </value>
        </member>
        <member name="M:Semver.SemVersion.ToString">
            <summary>
            Returns the <see cref="T:System.String" /> equivalent of this version.
            </summary>
            <returns>
            The <see cref="T:System.String" /> equivalent of this version.
            </returns>
        </member>
        <member name="M:Semver.SemVersion.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="obj" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="obj" />.
             Greater than zero: This instance follows <paramref name="obj" /> in the sort order.
            </returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="obj"/> is not a <see cref="T:Semver.SemVersion"/>.</exception>
        </member>
        <member name="M:Semver.SemVersion.CompareTo(Semver.SemVersion)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="other" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="other" />.
             Greater than zero: This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Semver.SemVersion.PrecedenceMatches(Semver.SemVersion)">
            <summary>
            Returns whether two semantic versions have the same precedence. Versions
            that differ only by build metadata have the same precedence.
            </summary>
            <param name="other">The semantic version to compare to.</param>
            <returns><see langword="true"/> if the version precedences are equal.</returns>
        </member>
        <member name="M:Semver.SemVersion.CompareByPrecedence(Semver.SemVersion)">
            <summary>
            Compares two semantic versions by precedence as defined in the SemVer spec. Versions
            that differ only by build metadata have the same precedence.
            </summary>
            <param name="other">The semantic version.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="other" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="other" />.
             Greater than zero: This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Semver.SemVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance, otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="obj"/> is not a <see cref="T:Semver.SemVersion"/>.</exception>
        </member>
        <member name="M:Semver.SemVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Semver.SemVersion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.SerializationInfo"/>) for this serialization.</param>
        </member>
        <member name="M:Semver.SemVersion.op_Implicit(System.String)~Semver.SemVersion">
            <summary>
            Implicit conversion from <see cref="T:System.String"/> to <see cref="T:Semver.SemVersion"/>.
            </summary>
            <param name="version">The semantic version.</param>
            <returns>The <see cref="T:Semver.SemVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The version number has an invalid format.</exception>
            <exception cref="T:System.OverflowException">The Major, Minor, or Patch versions are larger than <code>int.MaxValue</code>.</exception>
        </member>
        <member name="M:Semver.SemVersion.op_Equality(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares two semantic versions for equality.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.op_Inequality(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares two semantic versions for inequality.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is not equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.op_GreaterThan(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.op_GreaterThanOrEqual(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than or equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.op_LessThan(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Semver.SemVersion.op_LessThanOrEqual(Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than or equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
    </members>
</doc>
